// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id             String @id @default(cuid())
  username       String @unique
  name           String
  password       String
  profilePicture String @map("profile_picture")

  publicKey           String @map("public_key")
  encryptedPrivateKey String @map("encrypted_private_key")

  chatMemberships ChatMembership[]
  sentMessages    Message[]

  @@map("users")
}

model Chat {
  id String @id @default(cuid())

  isGroupChat Boolean @map("is_group_chat")

  name      String
  createdAt DateTime @default(now()) @map("created_at")

  chatMemberships ChatMembership[]
  messages        Message[]

  lastMessageSent DateTime? @map("last_message_sent")

  @@map("chat")
}

model ChatMembership {
  id String @id @default(cuid())

  userId String @map("user_id")
  chatId String @map("chat_id")

  user User @relation(fields: [userId], references: [id])
  chat Chat @relation(fields: [chatId], references: [id])

  joinedAt DateTime @default(now()) @map("joined_at")

  @@map("chat_membership")
}

enum MessageType {
  TEXT
  MEDIA
  STICKER
}

model Message {
  id String @id @default(cuid())

  senderId String @map("sender_id")
  chatId   String @map("chat_id")

  contentType MessageType @map("content_type")
  content     String
  createdAt   DateTime    @default(now()) @map("created_at")

  sender User @relation(fields: [senderId], references: [id])
  chat   Chat @relation(fields: [chatId], references: [id])

  @@map("message")
}
